// Code generation
// !!! Do not edit it.
// !!! Use code gen tool to generate.

package {{.Package}}

{{- if and (gt $.MessageHeadSize 0)}}
const (
    //消息头长度
    MsgHeadSize = 8
)
{{- end}}

//消息接口
type IMsg interface {
	//获取命令行
	GetCmd() uint16
	//获取版本号
	GetVersion() uint16
	//获取code
	GetCode() uint32
	//序列化
	Marshal(buf []byte) (out []byte, err error)
	//反序列化
	Unmarshal(buf []byte, count int) (err error)
}

//消息头
type MsgHead struct {
    //消息体大小
    Size uint32
    //消息编号
    Cmd uint16
    //消息版本号
    Version uint16
}

//反序列化消息头
func UnmarshalMsgHead(buf []byte) (MsgHead, error) {
    reader, err := NewRead*{{.Name}}(buf)
    head.Size, err = reader.ReadUint32()
    if err != nil {
        return head, err
    }
    head.Cmd, err = reader.ReadUint16()
    if err != nil {
        return head, err
    }
    head.Version, err = reader.ReadUint16()
    if err != nil {
        return head, err
    }
    return err
}

//序列化消息头
func MarshalMsgHead(writer *{{.Name}}, head MsgHead) error {
    err = writer.WriteUint32(head.Size)
    if err != nil {
        return err
    }
    err = writer.WriteUint16(head.Cmd)
    if err != nil {
        return err
    }
    err = writer.WriteUint16(head.Version)
    return err
}

{{- range $obj := .Objects}}
{{- if $obj.Cmd}}
//{{$obj.Comment}}
type Msg{{$obj.Name}} struct {
    {{$obj.Name}}
}

//获取命令行
func (msg *Msg{{$obj.Name}}) GetCmd() uint16 {
    return uint16({{$obj.Cmd}})
}

//获取版本号
func (msg *Msg{{$obj.Name}}) GetVersion() uint16 {
    return uint16({{$obj.Version}})
}

//获取Code
func (msg *Msg{{$obj.Name}}) GetCode() uint32 {
    return uint32({{$obj.Cmd}}) | (uint32({{$obj.Version}}) << 16)
}

//序列化
func (msg *Msg{{$obj.Name}}) Marshal(buf []byte) (int, []byte, error) {
    writer, err := NewWrite{{.Name}}(buf)
    if err != nil {
        return 0, nil, err
    }
    //先跳过消息头
    err = writer.MovePos(uint32(MsgHeadSize))
    if err != nil {
        return 0, nil, err
    }
    //写消息内容
    err = writer.Write{{$obj.Name}}(msg.{{$obj.Name}})
    if err != nil {
        return 0, nil, err
    }
    size := writer.ResetPos(0)
    //回填消息头
    contentSize := uint32(size-MsgHeadSize)
    err = MarshalMsgHead(writer,
        MsgHead{
            Size: contentSize,
            Cmd: uint16({{$obj.Cmd}}),
            Version: uint16({{$obj.Version}}),
        }
    if err != nil {
        return 0, nil, err
    }
    writer.ResetPos(size)
    return size, writer.Data(), err
}

//反序列化
func (msg *Msg{{$obj.Name}}) Unmarshal(buf []byte) error {
    reader, err := NewRead{{.Name}}(buf)
    if err != nil {
        return err
    }
    //读消息内容
    msg.{{$obj.Name}}, err = reader.Read{{$obj.Name}}()
    return err
}
{{- end}}

{{- end}}